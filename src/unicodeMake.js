/* eslint no-console:0 no-undef:0 */

// This is an internal Node tool, not part of the KaTeX distribution,
// whose purpose is to generate unicodeSymbols.js in this directory.
// In this way, only this tool, and not the distribution/browser,
// needs String's normalize function.
//
// This tool should be run (via `node unicodeMake.js` or `make unicode`)
// whenever KaTeX adds support for new accents, and whenever
// the Unicode spec adds new symbols that should be supported.

console.log("// This file is GENERATED by unicodeMake.js. DO NOT MODIFY.");
console.log("");

// Define accents locally and output the definition to unicodeSymbols.js
accentsCode = `accents = {
    '\\u0301': {text: "\\\\'", math: '\\\\acute'},
    '\\u0300': {text: '\\\\\`', math: '\\\\grave'},
    '\\u0308': {text: '\\\\"', math: '\\\\ddot'},
    '\\u0303': {text: '\\\\~', math: '\\\\tilde'},
    '\\u0304': {text: '\\\\=', math: '\\\\bar'},
    '\\u0306': {text: '\\\\u', math: '\\\\breve'},
    '\\u030c': {text: '\\\\v', math: '\\\\check'},
    '\\u0302': {text: '\\\\^', math: '\\\\hat'},
    '\\u0307': {text: '\\\\.', math: '\\\\dot'},
    '\\u030a': {text: '\\\\r'},
    '\\u030b': {text: '\\\\H'},
}`;
eval(accentsCode);
console.log(`export const ${accentsCode};`);
console.log();

const encode = function(string) {
    let output = '"';
    for (let i = 0; i < string.length; i++) {
        let hex = string.charCodeAt(i).toString(16);
        while (hex.length < 4) {
            hex = `0${hex}`;
        }
        output += `\\u${hex}`;
    }
    output = `${output}"`;
    return output;
};

console.log("export const unicodeSymbols = {");

const letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
for (const letter of letters) {
    for (const accent of Object.getOwnPropertyNames(accents)) {
        const combined = letter + accent;
        const normalized = combined.normalize('NFC');
        if (normalized.length === 1) {
            console.log(
                `    ${encode(normalized)}: ${encode(combined)},`
                + `  // ${normalized} = ${accents[accent].text}{${letter}}`);
        }
        for (const accent2 of Object.getOwnPropertyNames(accents)) {
            if (accent === accent2) {
                continue;
            }
            const combined2 = combined + accent2;
            const normalized2 = combined2.normalize('NFC');
            if (normalized2.length === 1) {
                console.log(
                    `    ${encode(normalized2)}: ${encode(combined2)},`
                    + `  // ${normalized2} = ${accents[accent].text}`
                    + `${accents[accent2].text}{${letter}}`);
            }
        }
    }
}

console.log("};");
