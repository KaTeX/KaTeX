name: Build fonts

on:
  push:
    branches: [ master ]
  pull_request_target:
    branches: [ master ]

jobs:
  docker:
    runs-on: ubuntu-latest
    environment: docker
    outputs:
      image: ${{ steps.check-image.outputs.result }}

    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false # minimize exposure and prevent accidental pushes

    - name: Check out Dockerfile from the pull request
      if: github.event_name == 'pull_request_target'
      run: git checkout "${{ format('refs/pull/{0}/merge', github.event.pull_request.number) }}" -- dockers/fonts/Dockerfile

    - name: Check image
      id: check-image
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GH_READONLY_TOKEN }}
        result-encoding: string
        script: |
          /* eslint-disable camelcase, max-len */
          const org = context.repo.owner;
          const package_type = "docker";
          const package_name = "fonts";
          const version = "${{ hashFiles('dockers/fonts/Dockerfile') }}";

          const packages = await github.request('GET /orgs/{org}/packages/{package_type}/{package_name}/versions', {
              org,
              package_type,
              package_name,
          });

          core.setOutput("exists", packages.data.some(p => p.html_url.includes(version)));
          return `${package_type}.pkg.github.com/${org}/${context.repo.repo}/${package_name}:${version}`.toLowerCase();

    - name: Build image
      if: ${{ !fromJSON(steps.check-image.outputs.exists) }}
      run: docker build dockers/fonts --tag ${{ steps.check-image.outputs.result }}

    - name: Log into registry
      if: ${{ !fromJSON(steps.check-image.outputs.exists) }}
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

    - name: Push image
      if: ${{ !fromJSON(steps.check-image.outputs.exists) }}
      run: docker push ${{ steps.check-image.outputs.result }}

  fonts:
    runs-on: ubuntu-latest
    needs: docker
    container:
      image: ${{ needs.docker.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_READONLY_TOKEN }}

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event_name == 'pull_request_target' && format('refs/pull/{0}/merge', github.event.pull_request.number) || '' }}
        fetch-depth: 0
        token: ${{secrets.GH_READONLY_TOKEN}}
        persist-credentials: false

    - name: Check font version
      id: check-version
      run: |
        VERSION=$(cat fonts/VERSION)
        if [ "${{github.event_name}}" = "push" ]; then
          SOURCE_DATE_EPOCH=$VERSION
        else
          SOURCE_DATE_EPOCH=$(git log -1 --format=%ct -- src/fonts)
          if [ "$VERSION" = "$SOURCE_DATE_EPOCH" ]; then
            echo "::set-output name=up-to-date::true"
          fi
        fi
        echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV

    - name: Build fonts
      if: ${{ !steps.check-version.outputs.up-to-date }}
      run: |
        make -C src/fonts all
        rm -f fonts/*.*
        cp src/fonts/ttf/*.ttf fonts
        cp src/fonts/woff/*.woff fonts
        cp src/fonts/woff2/*.woff2 fonts
        echo $SOURCE_DATE_EPOCH > fonts/VERSION

    - name: Run git diff
      if: ${{ !steps.check-version.outputs.up-to-date }}
      run: |
        printf '[diff "font"]\n\tbinary = true\n\ttextconv = ttx -q -i -o -' >> ~/.gitconfig
        git diff --exit-code

    - name: Build metrics
      if: failure()
      run: ./dockers/fonts/buildMetrics.sh

    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: fonts
        path: fonts
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: metrics
        path: src/fontMetricsData.js
